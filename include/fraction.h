#ifndef FRACTION_H
#define FRACTION_H

/**
 * @brief Структура для представления дроби
 * 
 * Содержит числитель и знаменатель. Знаменатель всегда должен быть положительным.
 */
struct Fraction {
    int num; ///< Числитель дроби (может быть отрицательным)
    int den; ///< Знаменатель дроби (всегда положительный)
};

/**
 * @brief Сложение двух дробей
 * 
 * @param a Первая дробь для сложения
 * @param b Вторая дробь для сложения
 * @return Fraction Новая дробь, являющаяся результатом сложения
 * 
 * @note Формула: a/b + c/d = (a*d + c*b)/(b*d)
 * @warning Знаменатель результата всегда будет положительным
 */
Fraction add(Fraction a, Fraction b);

/**
 * @brief Умножение двух дробей
 * 
 * @param a Первая дробь для умножения
 * @param b Вторая дробь для умножения
 * @return Fraction Новая дробь, являющаяся результатом умножения
 * 
 * @note Формула: (a/b) * (c/d) = (a*c)/(b*d)
 * @warning Знаменатель результата всегда будет положительным
 */
Fraction multiply(Fraction a, Fraction b);

/**
 * @brief Упрощение дроби до несократимого вида
 * 
 * Функция находит наибольший общий делитель (НОД) числителя и знаменателя
 * и делит их на него. Также обеспечивает, что знаменатель всегда положительный.
 * 
 * @param f Ссылка на дробь, которая будет упрощена (изменяется на месте)
 * 
 * @example 
 * Дробь 4/8 будет упрощена до 1/2
 * Дробь -3/9 будет упрощена до -1/3
 * Дробь 5/-10 будет преобразована к -1/2
 */
void simplify(Fraction &f);

/**
 * @brief Вывод дроби в читаемом формате
 * 
 * @param f Дробь для вывода
 * 
 * @note Выводит в формате "числитель/знаменатель"
 * @special Если знаменатель равен 1, выводит только числитель
 */
void printFraction(Fraction f);

#endif